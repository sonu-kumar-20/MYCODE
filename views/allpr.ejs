<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>All Problems</title>
  <!-- Google Fonts for Material Symbols -->
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined&display=swap" />
  <link rel="stylesheet" href="/styles/styleAllprob.css">
</head>
<body>
  <h2 style="color: #FF4500;">A Complete Coding Platform for Aspiring Programmers, Created by NIT Alumni</h2>
  <table>
    <thead>
      <tr>
        <th>Problem</th>
        <th>Solution</th>
        <th>Solved</th>
        <th>Notes</th>
        <th>VVI</th>
        <th>Level</th>
        <th>Status</th>
      </tr>
    </thead>
    <tbody>
      <% problems.forEach(problem => { %>
        <tr>
          <td>
            <a href="/problems/<%= problem._id %>"><%= problem.title %></a>
          </td>

          <!-- Solution: Video link -->
          <td>
            <a href="#" class="videoLink" data-video="<%= problem.videoUrl %>">
              <span class="material-symbols-outlined">play_circle</span>
            </a>
            <div class="videoContainer"></div>
          </td>
          
          

          <!-- Solved: Link to solve page -->
          <td>
            <a href="/problems/<%= problem._id %>">Solve</a>
          </td>

          <!-- Notes: icons only for now -->
          <td>
            <a href="#"><span title="My Notes">üìù</span></a>
            <a href="#"><span title="Code Solution">üíª</span></a>
          </td>

          <!-- VVI: clickable star icon -->
          <td>
            <span 
              class="vvi-icon material-symbols-outlined" 
              data-id="<%= problem._id %>" 
              id="vvi-<%= problem._id %>"
            >
              hotel_class
            </span>
          </td>
          

          <!-- Level from DB -->
          <td class="difficulty">
            <span class="<%= problem.difficulty.toLowerCase() %>">
              <%= problem.difficulty %>
            </span>
          </td>
          
          

          <!-- Status checkbox -->
          <td class="status">
            <input type="checkbox" class="problem-checkbox" <% if (problem.solved) { %> checked <% } %> data-id="<%= problem._id %>">
          </td>
        </tr>
      <% }) %>
    </tbody>
  </table>

  <script>
      // Star icon logic for VVI
      document.addEventListener("DOMContentLoaded", () => {
    const stars = document.querySelectorAll('.vvi-icon');

    stars.forEach(star => {
      star.addEventListener('click', function () {
        this.classList.toggle('active');
        const problemId = this.getAttribute('data-id');
        const isImportant = this.classList.contains('active');

        console.log(`Problem ID: ${problemId}, Marked Important: ${isImportant}`); // This should show up

        fetch(`/updateVVI/${problemId}`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ important: isImportant }),
        })
        .then(response => response.json())
        .then(data => console.log('VVI status updated', data))
        .catch(error => console.error('Error updating VVI status', error));
      });
    });
  });

    // Select all checkboxes for Solved Status
    const checkboxes = document.querySelectorAll('.problem-checkbox');

    checkboxes.forEach(checkbox => {
      checkbox.addEventListener('change', function() {
        const problemId = this.getAttribute('data-id');
        const solvedStatus = this.checked;

        console.log(`Problem ID: ${problemId}, Solved Status: ${solvedStatus}`);

        // Save this status to the database
        fetch(`/updateStatus/${problemId}`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ solved: solvedStatus }),
        })
        .then(response => response.json())
        .then(data => {
          console.log('Status updated', data);
        })
        .catch(error => {
          console.error('Error updating status', error);
        });
      });
    });
  </script>
<script>
  window.addEventListener("DOMContentLoaded", () => {
    const videoModal = document.getElementById("videoModal");
    const modalIframe = document.getElementById("modalIframe");
    const closeBtn = document.getElementById("modalClose");
    const fullscreenBtn = document.getElementById("modalFullscreen");

    document.querySelectorAll(".videoLink").forEach(link => {
      link.addEventListener("click", function (e) {
        e.preventDefault();
        const videoUrl = this.getAttribute("data-video");
        const embedUrl = convertToEmbedUrl(videoUrl);
        modalIframe.src = embedUrl;
        videoModal.style.display = "flex";
      });
    });

    closeBtn.addEventListener("click", () => {
      videoModal.style.display = "none";
      modalIframe.src = ""; // Stop the video
    });

    fullscreenBtn.addEventListener("click", () => {
      if (modalIframe.requestFullscreen) {
        modalIframe.requestFullscreen();
      } else if (modalIframe.mozRequestFullScreen) {
        modalIframe.mozRequestFullScreen();
      } else if (modalIframe.webkitRequestFullscreen) {
        modalIframe.webkitRequestFullscreen();
      } else if (modalIframe.msRequestFullscreen) {
        modalIframe.msRequestFullscreen();
      }
    });

    function convertToEmbedUrl(url) {
      if (url.includes("watch?v=")) {
        return "https://www.youtube.com/embed/" + url.split("v=")[1].split("&")[0];
      } else if (url.includes("youtu.be/")) {
        return "https://www.youtube.com/embed/" + url.split("youtu.be/")[1].split("?")[0];
      } else {
        return url; // already embed
      }
    }
  });
</script>


<div id="videoModal" class="video-modal">
  <div class="video-modal-content">
    <iframe id="modalIframe" frameborder="0" allowfullscreen></iframe>
    <div class="modal-buttons">
      <button id="modalClose">Close</button>
      <button id="modalFullscreen">Fullscreen</button>
    </div>
  </div>
</div> 
</body>
</html>
